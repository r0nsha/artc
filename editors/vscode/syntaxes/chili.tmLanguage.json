{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "scopeName": "source.chili",
  "name": "Chili",
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#functions-and-declarations"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#types"
    },
    {
      "include": "#punctuation"
    },
    {
      "include": "#identifier"
    }
  ],
  "repository": {
    "identifier": {
      "patterns": [
        {
          "name": "variable.other.chili",
          "match": "\\b[[:alpha:]_][[:alnum:]_]*\\b"
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "match": "#(.*)",
          "name": "comment.line.hash.chili"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.chili",
          "match": "\\b(if|else|while|for|in|break|continue|return)\\b"
        },
        {
          "name": "keyword.other.chili",
          "match": "\\b(let|type|fn|use|extern|comptime|as|struct|union|self|super)\\b"
        },
        {
          "name": "storage.modifier.chili",
          "match": "\\b(pub|pub\\(dir\\)|mut)\\b"
        },
        {
          "name": "constant.language.chili",
          "match": "\\b(nil|true|false)\\b"
        },
        {
          "match": "\\b(0)([xX])([0-9a-fA-F_]+)\\b",
          "captures": {
            "1": {
              "name": "constant.numeric.chili"
            },
            "2": {
              "name": "keyword.other.chili"
            },
            "3": {
              "name": "constant.numeric.chili"
            }
          }
        },
        {
          "match": "\\b(0)([oO])([0-7_]+)\\b",
          "captures": {
            "1": {
              "name": "constant.numeric.chili"
            },
            "2": {
              "name": "keyword.other.chili"
            },
            "3": {
              "name": "constant.numeric.chili"
            }
          }
        },
        {
          "match": "\\b(0)([bB])([01_]+)\\b",
          "captures": {
            "1": {
              "name": "constant.numeric.chili"
            },
            "2": {
              "name": "keyword.other.chili"
            },
            "3": {
              "name": "constant.numeric.chili"
            }
          }
        },
        {
          "name": "constant.numeric.chili",
          "match": "\\b[\\d_]+(?:\\.[\\d_]+)?\\b"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.comparison.chili",
          "match": "(==|!=|>=|<=|<|>)"
        },
        {
          "name": "keyword.operator.arithmetic.chili",
          "match": "(-%?|\\+%?|\\*%?|/|%)=?"
        },
        {
          "name": "keyword.operator.bitwise.chili",
          "match": "(<<%?|>>|!|&|\\^|~|\\|)=?"
        },
        {
          "name": "keyword.operator.special.chili",
          "match": "(=)"
        }
      ]
    },
    "functions-and-declarations": {
      "patterns": [
        {
          "comment": "let binding",
          "captures": {
            "1": {
              "name": "storage.modifier.chili"
            },
            "2": {
              "name": "keyword.other.chili"
            },
            "3": {
              "name": "keyword.other.chili"
            },
            "4": {
              "name": "entity.name.function.chili"
            }
          },
          "match": "\\b(pub\\s*|pub\\(dir\\)\\s*)?(let)\\s*(mut\\s*)?([[:alpha:]_][[:alnum:]_]*)\\b"
        },
        {
          "comment": "extern let binding",
          "captures": {
            "1": {
              "name": "storage.modifier.chili"
            },
            "2": {
              "name": "keyword.other.chili"
            },
            "3": {
              "name": "string.quoted.double.chili"
            },
            "4": {
              "name": "keyword.other.chili"
            },
            "5": {
              "name": "keyword.other.chili"
            },
            "6": {
              "name": "entity.name.function.chili"
            }
          },
          "match": "\\b(pub\\s*|pub\\(dir\\)\\s*)?\\b(extern)\\b\\s*(\".+\"\\s*)?(let)\\s*(mut\\s*)?([[:alpha:]_][[:alnum:]_]*)\\b"
        },
        {
          "comment": "type binding",
          "captures": {
            "1": {
              "name": "storage.modifier.chili"
            },
            "2": {
              "name": "keyword.other.chili"
            },
            "3": {
              "name": "entity.name.function.chili"
            }
          },
          "match": "\\b(pub\\s*|pub\\(dir\\)\\s*)?(type)\\s+([[:alpha:]_][[:alnum:]_]*)\\b"
        },
        {
          "comment": "attribute",
          "captures": {
            "1": {
              "name": "entity.name.tag.chili"
            },
            "2": {
              "name": "entity.name.tag.chili"
            },
            "3": {
              "name": "entity.name.tag.chili"
            }
          },
          "match": "(@[_a-zA-Z][_a-zA-Z0-9]*\\s*\\(?\\s*).*(\\)?)"
        },
        {
          "comment": "function expression",
          "match": "\\b(fn)\\s*([\\(])",
          "captures": {
            "1": {
              "name": "keyword.other.chili"
            },
            "2": {
              "name": "punctuation.chili"
            }
          }
        },
        {
          "comment": "function call",
          "captures": {
            "1": {
              "name": "support.function.chili"
            },
            "2": {
              "name": "punctuation.chili"
            }
          },
          "match": "([[:alpha:]_][[:alnum:]_]*)([\\(])"
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "keyword.type.chili",
          "match": "\\b(bool|i8|i16|i32|i64|i128|int|u8|u16|u32|u64|u128|uint|f16|f32|f64|float|str|never|Self)\\b"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.chili",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "include": "#string-escaped-char"
            }
          ]
        }
      ],
      "repository": {
        "string-escaped-char": {
          "patterns": [
            {
              "name": "constant.character.escape.chili",
              "match": "\\\\(\\\\|[abfnrutv''\"]|x\\h{2}|u\\h{4}|U\\h{8}|[0-7]{3})"
            },
            {
              "name": "invalid.illegal.unknown-escape.chili",
              "match": "\\\\."
            }
          ]
        }
      }
    },
    "punctuation": {
      "patterns": [
        {
          "name": "punctuation.chili",
          "match": "\\(|\\)|\\{|\\}|;|:|\\[|\\]|\\.|,|->|#|@"
        }
      ]
    }
  }
}
