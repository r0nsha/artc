use intrinsics.{os, Os_windows}

// Types
pub type c_char = u8
pub type wchar_t = if os == Os_windows { u16 } else { u32 }

pub type c_byte = i8
pub type c_short = i16
pub type c_int = i32
pub type c_long = if os == Os_windows || size_of!(uint) == 4 { i32 } else { i64 }
pub type c_longlong = i64

pub type c_uchar = u8
pub type c_ushort = u16
pub type c_uint = u32
pub type c_ulong = if os == Os_windows || size_of!(uint) == 4 { u32 } else { u64 }
pub type c_ulonglong = u64

pub type c_float = f32
pub type c_double = f64

pub type c_bool = bool


pub type size_t = uint
pub type ssize_t = int

pub type int8_t = i8
pub type uint8_t = u8

pub type int16_t = i16
pub type uint16_t = u16

pub type int32_t = i32
pub type uint32_t = u32

pub type int64_t = i64
pub type uint64_t = u64

pub type intptr_t = int
pub type uintptr_t = uint

pub type intmax_t = i64
pub type uintmax_t = u64

pub type pid_t = int

pub type c_void = ()

// Constants
pub let INT8_MAX: int8_t = 0x7f
pub let INT16_MAX: int16_t = 0x7fff
pub let INT32_MAX: int32_t = 0x7fffffff
pub let INT64_MAX: c_longlong = 0x7fffffffffffffff

pub let UINT8_MAX: uint8_t = 0xff
pub let UINT16_MAX: uint16_t = 0xffff
pub let UINT32_MAX: uint32_t = 0xffffffff
pub let UINT64_MAX: c_ulonglong = 0xffffffffffffffff

pub let INT8_MIN: int8_t = !INT8_MAX
pub let INT16_MIN: int16_t = !INT16_MAX
pub let INT32_MIN: int32_t = !INT32_MAX
pub let INT64_MIN: c_longlong = !INT64_MAX

pub let CHAR_BIT = 8

// Functions
let c = "c"

@lib(c)
pub extern fn putchar(char: c_int) -> c_int

@lib(c)
pub extern fn getchar() -> c_int

@lib(c)
pub extern fn printf(input: *c_char, args..) -> c_int

@lib(c)
pub extern fn strcpy(dest: *mut c_char, src: *c_char) -> *c_char

@lib(c)
pub extern fn malloc(size: size_t) -> *mut c_void

@lib(c)
pub extern fn calloc(nitems: size_t, size: size_t) -> *mut c_void

@lib(c)
pub extern fn realloc(ptr: *c_void, size: size_t) -> *mut c_void

@lib(c)
pub extern fn free(memblock: *c_void)

@lib(c)
pub extern fn abs(x: c_int) -> c_int

@lib(c)
pub extern fn sinf(arg: c_float) -> c_float

@lib(c)
pub extern fn sin(arg: c_double) -> c_double

@lib(c)
pub extern fn cosf(arg: c_float) -> c_float

@lib(c)
pub extern fn cos(arg: c_double) -> c_double

@lib(c)
pub extern fn atan2f(y: c_float, x: c_float) -> c_float

@lib(c)
pub extern fn atan2(y: c_double, x: c_double) -> c_double

@lib(c)
pub extern fn pow(x: c_double, y: c_double) -> c_double

@lib(c)
pub extern fn srand(seed: c_uint)

@lib(c)
pub extern fn rand() -> c_int

@lib(c)
pub extern fn fork() -> pid_t

@lib(c)
pub extern fn waitpid(pid: pid_t, status: *mut c_int, options: c_int) -> pid_t

@lib(c)
pub extern fn execl(path: *c_char, args..) -> c_int

@lib(c)
pub extern fn abort() -> never

@lib(c)
pub extern fn exit(status: c_int) -> never
