let * = import types

let kernel32 = "kernel32"

@lib(kernel32)
pub extern fn MultiByteToWideChar(
    CodePage: UINT,
    dwFlags: DWORD,
    lpMultiByteStr: LPSTR,
    cbMultiByte: i32, # c_int
    lpWideCharStr: LPWSTR,
    cchWideChar: i32, # c_int
) -> i32 # c_int

@lib(kernel32)
pub extern fn CreateProcessA(
    lpApplicationName: LPCSTR,
    lpCommandLine: LPSTR,
    lpProcessAttributes: LPSECURITY_ATTRIBUTES,
    lpThreadAttributes: LPSECURITY_ATTRIBUTES,
    bInheritHandles: BOOL,
    dwCreationFlags: DWORD,
    lpEnvironment: LPVOID,
    lpCurrentDirectory: LPCSTR,
    lpStartupInfo: LPSTARTUPINFO,
    lpProcessInformation: LPPROCESS_INFORMATION,
) -> BOOL

@lib(kernel32)
pub extern fn CreateProcessW(
    lpApplicationName: LPCWSTR,
    lpCommandLine: LPWSTR,
    lpProcessAttributes: LPSECURITY_ATTRIBUTES,
    lpThreadAttributes: LPSECURITY_ATTRIBUTES,
    bInheritHandles: BOOL,
    dwCreationFlags: DWORD,
    lpEnvironment: LPVOID,
    lpCurrentDirectory: LPCWSTR,
    lpStartupInfo: LPSTARTUPINFO,
    lpProcessInformation: LPPROCESS_INFORMATION,
) -> BOOL

@lib(kernel32)
pub extern fn WaitForSingleObject(hHandle: HANDLE, dwMilliseconds: DWORD) -> DWORD

@lib(kernel32)
pub extern fn CloseHandle(hObject: HANDLE) -> BOOL

@lib(kernel32)
pub extern fn GetLastError() -> DWORD