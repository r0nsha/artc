import lib.{
	c.{ printf, exit as c_exit },
	intrinsics.{ os, Os_linux, Os_windows, caller_location },
}

pub fn exit(ec: int) -> never = {
	c_exit(ec as _)
}

@track_caller
pub fn panic(
    fmt: *str = "unknown reason",
) -> never = {
    # TODO: use our own println function.
    let { file, line, column } = caller_location()

    printf(
        "panic: \"%s\" at %s:%u:%u\n".data, 
        fmt.data,
        file.data,
        line,
        column
    )

    exit(1)
}

pub fn start(output_file: *str) -> () = {
    if os == Os_linux {
        import c.{ waitpid, fork, execl }

        let pid = fork()

        if pid == 0 {
            # child process
            execl(output_file.data, 0)
        } else if pid > 0 {
            # parent process
            waitpid(pid, (0 as int) as _, 0)
        } else {
            # error
            panic("fork failed")
        }
    } else if os == Os_windows {
        import sys.{ windows as w }

		let si = w.types.STARTUPINFO {
			cb: size_of!(w.types.STARTUPINFO) as _,
			lpReserved: 0 as uint as _,
			lpDesktop: 0 as uint as _,
			lpTitle: 0 as uint as _,
			dwX: 0,
			dwY: 0,
			dwXSize: 0,
			dwYSize: 0,
			dwXCountChars: 0,
			dwYCountChars: 0,
			dwFillAttribute: 0,
			dwFlags: 0,
			wShowWindow: 0,
			cbReserved2: 0,
			lpReserved2: 0 as uint as _,
			hStdInput: 0,
			hStdOutput: 0,
			hStdError: 0,
		}

		let mut pi = w.types.PROCESS_INFORMATION {
			hProcess: 0,
			hThread: 0,
			dwProcessId: 0,
			dwThreadId: 0,
		}

		if w.kernel32.CreateProcessA(
			output_file.data,
			0 as uint as _, # null
			0 as uint as _, # null
			0 as uint as _, # null
			w.types.FALSE,
			0,
			0 as uint as _, # null
			0 as uint as _, # null
			&si,
			&mut pi,
		) != 0 {
			w.kernel32.WaitForSingleObject(pi.hProcess, w.types.INFINITE)
			w.kernel32.CloseHandle(pi.hProcess)
		} else {
			printf("error = %d\n".data, w.kernel32.GetLastError())
			panic("CreateProcessA failed")
		}
    } else {
        std.intrinsics.compiler_error("unsupported OS")
    }
}